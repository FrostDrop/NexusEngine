name: Nexus

resources:
 repositories:
 - repository: self
   checkoutOptions:
    submodules: true

trigger:
 branches:
  include:
  - master
  - development
  - feature/*

jobs:
- job: Windows
  pool:
   vmImage: 'windows-latest'

  steps:
  - task: BatchScript@1
    displayName: Setup
    inputs:
     filename: "Setup.bat"

  - task: BatchScript@1
    displayName: Generate Project Files
    inputs:
     filename: "GenerateProjectFiles.bat"

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Analysis Configuration'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'mexel70-organization'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'Nexus'
      cliProjectName: 'Nexus'
      cliSources: 'Nexus'
      extraProperties: |
        sonar.sources=Engine/Source
        sonar.exclusions=Engine/Binaries, Engine/Build, Engine/Intermediates, Engine/Source/ThirdParty
        sonar.cfamily.build-wrapper-output=BuildWrapperOutputDirectory
        sonar.sourceEncoding=UTF-8

  - task: PowerShell@2
    displayName: 'Download and Expand Build Wrapper'
    inputs:
     targetType: 'inline'
     script: |
       Invoke-WebRequest -Uri 'https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip' -OutFile '$(Agent.TempDirectory)\build-wrapper.zip'
       Expand-Archive -Path '$(Agent.TempDirectory)\build-wrapper.zip' -DestinationPath '$(Agent.TempDirectory)/buildWrapper' -Force

  - task: PowerShell@2
    displayName: 'Execute Analysis Build'
    inputs:
      targetType: 'inline'
      script: |
        & '$(Agent.TempDirectory)\buildWrapper\build-wrapper-win-x86\build-wrapper-win-x86-64.exe' --out-dir BuildWrapperOutputDirectory 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe' Nexus.sln /t:Rebuild

  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud Analysis'

  - task: SonarCloudPublish@1
    displayName: 'Publish Sonarcloud Analysis'
    inputs:
      pollingTimeoutSec: '300'

  - task: MSBuild@1
    displayName: Debug Build
    inputs:
     solution: "Nexus.sln"
     msbuildVersion: "latest"
     msbuildArchitecture: "x64"
     configuration: "Debug"

  - task: MSBuild@1
    displayName: Release Build
    inputs:
     solution: "Nexus.sln"
     msbuildVersion: "latest"
     msbuildArchitecture: "x64"
     configuration: "Release"

  - task: MSBuild@1
    displayName: Distribution Build
    inputs:
     solution: "Nexus.sln"
     msbuildVersion: "latest"
     msbuildArchitecture: "x64"
     configuration: "Distribution"

  - task: CmdLine@2
    displayName: Create Distribution Directory
    inputs:
      script: "mkdir $(Build.ArtifactStagingDirectory)\\Windows\\"

  - task: CopyFiles@2
    displayName: Copy Binary Files
    inputs:
      contents: "Engine/Binaries/Distribution-*/?(*.exe|*.dll)"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Windows/"
      flattenFolders: true
    
  - task: PublishBuildArtifacts@1
    displayName: Publish Binary Files
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/Windows/"
      artifactName: "Windows Distribution"

- job: Linux
  pool:
   vmImage: "ubuntu-latest"

  steps:
  - task: ShellScript@2
    displayName: Setup
    inputs:
     scriptPath: "Setup.sh"

  - task: ShellScript@2
    displayName: Generate Project Files
    inputs:
     scriptPath: "GenerateProjectFiles.sh"

  - task: Bash@3
    displayName: Debug Build
    inputs:
     targetType: "inline"
     script: "make config=debug"

  - task: Bash@3
    displayName: Release Build
    inputs:
     targetType: "inline"
     script: "make config=release"

  - task: Bash@3
    displayName: Distribution Build
    inputs:
     targetType: "inline"
     script: "make config=distribution"

  - task: Bash@3
    displayName: Create Distribution Directory
    inputs:
     targetType: "inline"
     script: "mkdir $(Build.ArtifactStagingDirectory)/Linux/"

  - task: CopyFiles@2
    displayName: Copy Binary Files
    inputs:
      contents: "Engine/Binaries/Distribution-*/!(*.*)"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Linux/"
      flattenFolders: true

  - task: CopyFiles@2
    displayName: Copy Binary Files
    inputs:
      contents: "Engine/Binaries/Distribution-*/?(*.so)"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Linux/"
      flattenFolders: true
    
  - task: PublishBuildArtifacts@1
    displayName: Publish Binary Files
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/Linux/"
      artifactName: "Linux Distribution"

- job: Mac
  pool: 
   vmImage: "macOS-latest"

  steps:
  - task: ShellScript@2
    displayName: Setup
    inputs:
     scriptPath: "Setup.command"

  - task: ShellScript@2
    displayName: Generate Project Files
    inputs:
     scriptPath: "GenerateProjectFiles.command"

  - task: Xcode@5
    displayName: Debug Build
    inputs:
     sdk: "macosx"
     actions: "build"
     scheme: "Sandbox"
     configuration: "Debug"
     xcWorkspacePath: "Nexus.xcworkspace"
     xcodeVersion: "default"
     signingOption: "default"
     useXcpretty: "false"

  - task: Xcode@5
    displayName: Release Build
    inputs:
     sdk: "macosx"
     actions: "build"
     scheme: "Sandbox"
     configuration: "Release"
     xcWorkspacePath: "Nexus.xcworkspace"
     xcodeVersion: "default"
     signingOption: "default"
     useXcpretty: "false"

  - task: Xcode@5
    displayName: Distribution Build
    inputs:
     sdk: "macosx"
     actions: "build"
     scheme: "Sandbox"
     configuration: "Distribution"
     xcWorkspacePath: "Nexus.xcworkspace"
     xcodeVersion: "default"
     signingOption: "default"
     useXcpretty: "false"

  - task: Bash@3
    displayName: Create Distribution Directory
    inputs:
     targetType: "inline"
     script: "mkdir $(Build.ArtifactStagingDirectory)/Mac/"

  - task: CopyFiles@2
    displayName: Copy Binary Files
    inputs:
      contents: "Engine/Binaries/Distribution-*/!(*.*)"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Mac/"
      flattenFolders: true

  - task: CopyFiles@2
    displayName: Copy Binary Files
    inputs:
      contents: "Engine/Binaries/Distribution-*/?(*.dylib)"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Mac/"
      flattenFolders: true
    
  - task: PublishBuildArtifacts@1
    displayName: Publish Binary Files
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)/Mac/"
      artifactName: "Mac Distribution"

